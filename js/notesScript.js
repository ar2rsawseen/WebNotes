if(!Array.prototype.indexOf) {    Array.prototype.indexOf = function(what, i) {        i = i || 0;        var L = this.length;        while (i < L) {            if(this[i] === what) return i;            ++i;        }        return -1;    };}var notes = {};notes.Separator = function(data, parent){	this.elem;	this.data = data;	var ob = this;	this.construct = function(){		this.elem = document.createElement('li');		this.elem.id = "notes_" + this.data.id;		this.elem.draggable = true;		notes.Generic.addClass(this.elem, "notesSeparator");		notes.Generic.addEvent(this.elem, "mousedown", this.click);		notes.Generic.addEvent(this.elem, "contextmenu", this.context);		notes.Generic.addEvent(this.elem, "dragstart", function(e){			notes.Generic.cancelEvent(e);			e.dataTransfer.setData("notesDrag", ob.data.id);		});		notes.Generic.addEvent(this.elem, "dragover", function(e){			e.preventDefault();			notes.Generic.cancelEvent(e);		});		notes.Generic.addEvent(this.elem, "drop", function(e){			e.preventDefault();			notes.Generic.cancelEvent(e);			var data=parseInt(e.dataTransfer.getData("notesDrag"));			ob.elem.parentNode.insertBefore(notes.Generic.dataTree[data].getElem(), ob.elem);			var id = ob.elem.parentNode.parentNode.id.toString().split("_");			var data = notes.Generic.dataTree[id[1]].getData();			if(!data.children)				data.children = [];			var d = item.getData();			notes.Generic.deleteItem(notes.Generic.notesData, d);			data.children[data.children.length] = d;			notes.Generic.saveData("notesData", notes.Generic.notesData);		});		parent.appendChild(this.elem);	};		this.click = function(e){		notes.Generic.cancelEvent(e);		if(!e.ctrlKey)			for(var i = notes.Generic.curItem.length-1; i >= 0; i--)				notes.Generic.curItem[i].unselect();				if(e.ctrlKey && notes.Generic.curItem.indexOf(ob) > -1)			ob.unselect();		else			ob.select();	};		this.context = function(e){		notes.Generic.cancelEvent(e);		notes.Generic.preventDefault(e);		if(notes.Generic.subAddButton.style.display == "block")			notes.Generic.subAddButton.style.display = "none";		if(notes.Generic.contextMenu.style.display == "block")			notes.Generic.contextMenu.style.display = "none";		if(notes.Generic.prompt.style.display == "block")			notes.Generic.prompt.style.display = "none";		return false;	};		this.getElem = function(){		return this.elem;	};		this.getData = function(){		return this.data;	};		this.select = function(){		notes.Generic.curItem.push(this);		notes.Generic.addClass(this.elem, "notesSepSelected");		notes.Generic.sendButton.disabled = true;		notes.Generic.printButton.disabled = true;		notes.Generic.deleteButton.disabled = false;		notes.Generic.settingData.selection.push(this.data.id);		notes.Generic.saveData("notesSettings", notes.Generic.settingData);		notes.Generic.textArea.value = "";		notes.Generic.textArea.readOnly = true;	};		this.unselect = function(){		var index = notes.Generic.curItem.indexOf(this);		if(index > -1)			notes.Generic.curItem.splice(index, 1);		notes.Generic.removeClass(this.elem, "notesSepSelected");		index = notes.Generic.settingData.selection.indexOf(this.data.id);		if(index > -1)		{			notes.Generic.settingData.selection.splice(index, 1);			notes.Generic.saveData("notesSettings", notes.Generic.settingData);		}	};		this.getType = function(){		return "separator";	};		this.construct();};notes.Note = function(data, parent){	this.data = data;	this.textNode;	this.elem;	var ob = this;	this.construct = function(){		this.elem = document.createElement('li');		this.elem.id = "notes_" + this.data.id;		this.elem.draggable = true;		notes.Generic.addClass(this.elem, "notesItem");				var a = document.createElement('a');		this.elem.appendChild(a);				var i = document.createElement('i');		notes.Generic.addClass(i, "notesIcon");		a.appendChild(i);				this.textNode = document.createTextNode("");		a.appendChild(this.textNode);		this.setText(this.data.name);				notes.Generic.addEvent(this.elem, "mousedown", this.click);		notes.Generic.addEvent(this.elem, "contextmenu", this.context);		notes.Generic.addEvent(this.elem, "dragstart", function(e){			notes.Generic.cancelEvent(e);			e.dataTransfer.setData("notesDrag", ob.data.id);		});		notes.Generic.addEvent(this.elem, "dragover", function(e){			notes.Generic.cancelEvent(e);			e.preventDefault();		});		notes.Generic.addEvent(this.elem, "drop", function(e){			e.preventDefault();			notes.Generic.cancelEvent(e);			var data=parseInt(e.dataTransfer.getData("notesDrag"));			var item =notes.Generic.dataTree[data];			ob.elem.parentNode.insertBefore(item.getElem(), ob.elem);			var id = ob.elem.parentNode.parentNode.id.toString().split("_");			var data = notes.Generic.dataTree[id[1]].getData();			if(!data.children)				data.children = [];			var d = item.getData();			notes.Generic.deleteItem(notes.Generic.notesData, d);			data.children[data.children.length] = d;			notes.Generic.saveData("notesData", notes.Generic.notesData);		});		parent.appendChild(this.elem);	};		this.click =  function(e){		notes.Generic.cancelEvent(e);		if(!e.ctrlKey)			for(var i = notes.Generic.curItem.length-1; i >= 0; i--)				notes.Generic.curItem[i].unselect();		if(e.ctrlKey && notes.Generic.curItem.indexOf(ob) > -1)			ob.unselect();		else			ob.select();	};		this.context = function(e){		notes.Generic.cancelEvent(e);		notes.Generic.preventDefault(e);		notes.Generic.contextMenu.style.display = "block";		notes.Generic.contextMenu.style.left = e.clientX;		notes.Generic.contextMenu.style.top = e.clientY;		return false;	};		this.show = function(){		this.elem.style.display = "block";	};		this.hide = function(){		this.elem.style.display = "none";	};		this.getElem = function(){		return this.elem;	};		this.getData = function(){		return this.data;	};		this.select = function(){		notes.Generic.curItem.push(this);		notes.Generic.addClass(this.elem, "notesSelected");		notes.Generic.sendButton.disabled = false;		notes.Generic.printButton.disabled = false;		notes.Generic.deleteButton.disabled = false;		notes.Generic.settingData.selection.push(this.data.id);		notes.Generic.saveData("notesSettings", notes.Generic.settingData);		notes.Generic.textArea.readOnly = false;		notes.Generic.textArea.value = this.data.name;	};		this.unselect = function(){		notes.Generic.removeClass(this.elem, "notesSelected");		var index = notes.Generic.curItem.indexOf(this);		if(index > -1)			notes.Generic.curItem.splice(index, 1);		index = notes.Generic.settingData.selection.indexOf(this.data.id);		if(index > -1)		{			notes.Generic.settingData.selection.splice(index, 1);			notes.Generic.saveData("notesSettings", notes.Generic.settingData);		}	};		this.setText = function(text){		this.data.name = text;		this.textNode.nodeValue = notes.Generic.truncateText(text);		notes.Generic.saveData("notesData", notes.Generic.notesData);	};		this.getType = function(){		return "note";	};		this.construct();}notes.Folder = function(data, parent){	this.data = data	this.elem;	this.parent;	this.textNode;	var ob = this;	this.construct = function(){		this.elem = document.createElement('li');		this.elem.id = "notes_" + this.data.id;		this.elem.draggable = true;		notes.Generic.addClass(this.elem, "notesFolder");				if(this.data.children && this.data.children.length > 0)		{			if(this.data.status == "opened")				this.open();			else if(this.data.status == "closed")				this.close();		}				var a = document.createElement('a');		this.elem.appendChild(a);				var i = document.createElement('i');		notes.Generic.addClass(i, "notesIcon");		a.appendChild(i);				this.textNode = document.createTextNode("");		a.appendChild(this.textNode);		this.setText(this.data.name);				this.parent = document.createElement('ul');		this.elem.appendChild(this.parent);				notes.Generic.addEvent(this.elem, "mousedown", this.click);		notes.Generic.addEvent(this.elem, "contextmenu", this.context);		notes.Generic.addEvent(this.elem, "dragstart", function(e){			notes.Generic.cancelEvent(e);			e.dataTransfer.setData("notesDrag", ob.data.id);		});		notes.Generic.addEvent(this.elem, "dragover", function(e){			notes.Generic.cancelEvent(e);			e.preventDefault();		});		notes.Generic.addEvent(this.elem, "drop", function(e){			e.preventDefault();			notes.Generic.cancelEvent(e);			var data=parseInt(e.dataTransfer.getData("notesDrag"));			var item = notes.Generic.dataTree[data];			ob.parent.appendChild(item.getElem());			ob.open();			if(!ob.data.children)				ob.data.children = [];			var d = item.getData();			notes.Generic.deleteItem(notes.Generic.notesData, d);			ob.data.children[ob.data.children.length] = d;			notes.Generic.saveData("notesData", notes.Generic.notesData);		});		parent.appendChild(this.elem);	};		this.click = function(e){		notes.Generic.cancelEvent(e);		if(ob.isSelected())		{			if(notes.Generic.hasClass(ob.elem, "notesOpened"))			{				ob.close();			}			else if(notes.Generic.hasClass(ob.elem, "notesClosed"))			{				ob.open();			}		}		if(!e.ctrlKey)			for(var i = notes.Generic.curItem.length-1; i >= 0; i--)				notes.Generic.curItem[i].unselect();		if(e.ctrlKey && notes.Generic.curItem.indexOf(ob) > -1)			ob.unselect();		else			ob.select();	};		this.context = function(e){		notes.Generic.cancelEvent(e);		notes.Generic.preventDefault(e);		notes.Generic.contextMenu.style.display = "block";		notes.Generic.contextMenu.style.left = e.clientX;		notes.Generic.contextMenu.style.top = e.clientY;		return false;	};		this.show = function(){		this.elem.style.display = "block";	};		this.hide = function(){		var shouldHide = true;		var l = this.parent.children.length;		var child;		for(var i = 0; i < l; i++)		{			child = this.parent.children[i];			if(child.style.display != "none")			{				shouldHide = false;				break;			}		}		if(shouldHide)			this.elem.style.display = "none";	};		this.getElem = function(){		return this.parent;	};		this.getData = function(){		return this.data;	};		this.open = function(){		notes.Generic.removeClass(this.elem, "notesClosed");		notes.Generic.addClass(this.elem, "notesOpened");		this.data.status = "opened";		notes.Generic.saveData("notesData", notes.Generic.notesData);	};		this.close = function(){		notes.Generic.removeClass(this.elem, "notesOpened");		notes.Generic.addClass(this.elem, "notesClosed");		this.data.status = "closed";		notes.Generic.saveData("notesData", notes.Generic.notesData);	};		this.select = function(){		notes.Generic.curItem.push(this);		notes.Generic.addClass(this.elem, "notesSelected");		notes.Generic.sendButton.disabled = false;		notes.Generic.printButton.disabled = true;		notes.Generic.deleteButton.disabled = false;		notes.Generic.settingData.selection.push(this.data.id);		notes.Generic.saveData("notesSettings", notes.Generic.settingData);		notes.Generic.textArea.readOnly = false;		notes.Generic.textArea.value = this.data.name;	};		this.unselect = function(){		var index = notes.Generic.curItem.indexOf(this);		if(index > -1)			notes.Generic.curItem.splice(index, 1);		notes.Generic.removeClass(this.elem, "notesSelected");		index = notes.Generic.settingData.selection.indexOf(this.data.id);		if(index > -1)		{			notes.Generic.settingData.selection.splice(index, 1);			notes.Generic.saveData("notesSettings", notes.Generic.settingData);		}	};		this.isSelected = function(){		return notes.Generic.hasClass(this.elem, "notesSelected");	};		this.setText = function(text){		this.data.name = text;		this.textNode.nodeValue = notes.Generic.truncateText(text);		notes.Generic.saveData("notesData", notes.Generic.notesData);	};		this.getType = function(){		return "folder";	};		this.construct();}notes.Trash = function(data, parent){	this.data = data;	this.elem;	this.textNode;	this.parent;	var ob = this;	this.construct = function(){		notes.Generic.trash = this;		this.elem = document.createElement('li');		this.elem.id = "notes_" + this.data.id;		notes.Generic.addClass(this.elem, "notesTrash");				var a = document.createElement('a');		this.elem.appendChild(a);				var i = document.createElement('i');		notes.Generic.addClass(i, "notesIcon");		a.appendChild(i);				this.textNode = document.createTextNode(this.data.name);		a.appendChild(this.textNode);				this.parent = document.createElement('ul');		this.elem.appendChild(this.parent);				if(this.data.children && this.data.children.length > 0)		{			if(this.data.status == "opened")				this.open();			else if(this.data.status == "closed")				this.close();		}				notes.Generic.addEvent(this.elem, "mousedown", this.click);		notes.Generic.addEvent(this.elem, "contextmenu", this.context);		notes.Generic.addEvent(this.elem, "dragover", function(e){			notes.Generic.cancelEvent(e);			e.preventDefault();		});		notes.Generic.addEvent(this.elem, "drop", function(e){			e.preventDefault();			notes.Generic.cancelEvent(e);			var data=parseInt(e.dataTransfer.getData("notesDrag"));			var item = notes.Generic.dataTree[data]			ob.parent.appendChild(item.getElem());			ob.open();			if(!ob.data.children)				ob.data.children = [];			var d = item.getData();			notes.Generic.deleteItem(notes.Generic.notesData, d);			ob.data.children[ob.data.children.length] = d;			notes.Generic.trashCan.push(item);			notes.Generic.saveData("notesData", notes.Generic.notesData);		});		parent.appendChild(this.elem);	};		this.click = function(e){		notes.Generic.cancelEvent(e);		if(ob.isSelected())		{			if(notes.Generic.hasClass(ob.elem, "notesOpened"))			{				ob.close();			}			else if(notes.Generic.hasClass(ob.elem, "notesClosed"))			{				ob.open();			}		}		if(!e.ctrlKey)			for(var i = notes.Generic.curItem.length-1; i >= 0; i--)				notes.Generic.curItem[i].unselect();		if(e.ctrlKey && notes.Generic.curItem.indexOf(ob) > -1)			ob.unselect();		else			ob.select();	};		this.context = function(e){		notes.Generic.cancelEvent(e);		notes.Generic.preventDefault(e);		notes.Generic.contextMenu.style.display = "block";		notes.Generic.contextMenu.style.left = e.clientX;		notes.Generic.contextMenu.style.top = e.clientY;		return false;	};		this.getElem = function(){		return this.parent;	};		this.getData = function(){		return this.data;	};		this.open = function(){		notes.Generic.removeClass(this.elem, "notesClosed");		notes.Generic.addClass(this.elem, "notesOpened");		this.data.status = "opened";		notes.Generic.saveData("notesData", notes.Generic.notesData);	};		this.close = function(){		notes.Generic.removeClass(this.elem, "notesOpened");		notes.Generic.addClass(this.elem, "notesClosed");		this.data.status = "closed";		notes.Generic.saveData("notesData", notes.Generic.notesData);	};		this.empty = function(){		notes.Generic.removeClass(this.elem, "notesOpened");		notes.Generic.removeClass(this.elem, "notesClosed");		this.data.status = null;		notes.Generic.saveData("notesData", notes.Generic.notesData);	};		this.select = function(){		notes.Generic.curItem.push(this);		notes.Generic.addClass(this.elem, "notesSelected");		notes.Generic.sendButton.disabled = true;		notes.Generic.printButton.disabled = true;		notes.Generic.deleteButton.disabled = true;		notes.Generic.settingData.selection.push(this.data.id);		notes.Generic.saveData("notesSettings", notes.Generic.settingData);		notes.Generic.textArea.value = "";		notes.Generic.textArea.readOnly = true;	};		this.unselect = function(){		var index = notes.Generic.curItem.indexOf(this);		if(index > -1)			notes.Generic.curItem.splice(index, 1);		notes.Generic.removeClass(this.elem, "notesSelected");		index = notes.Generic.settingData.selection.indexOf(this.data.id);		if(index > -1)		{			notes.Generic.settingData.selection.splice(index, 1);			notes.Generic.saveData("notesSettings", notes.Generic.settingData);		}	};		this.isSelected = function(){		return notes.Generic.hasClass(this.elem, "notesSelected");	};		this.getType = function(){		return "trash";	};		this.construct();}notes.Manager = function(){	this.tree;	this.retest;	var ob = this;		this.construct = function(){		createContext();		createPrompt();		notes.Generic.textArea = document.getElementById("notesContent");		notes.Generic.addEvent(notes.Generic.textArea, "keyup", function(e){			notes.Generic.cancelEvent(e);			if(notes.Generic.curItem.length > 0)			{				var item = notes.Generic.curItem[notes.Generic.curItem.length-1];				if(item.getType() != "trash" && item.getType() != "separator")					item.setText(notes.Generic.textArea.value);			}		});				notes.Generic.search = document.getElementById("notesSearch");		notes.Generic.addEvent(notes.Generic.search, "keyup", function(e){			search();			notes.Generic.cancelEvent(e);			ob.retest = setTimeout(search, 500);		});				notes.Generic.resizer = document.getElementById("notesResizer");		notes.Generic.contentHolder = document.getElementById("notesContentHolder");		notes.Generic.treeHolder = document.getElementById("notesTreeHolder");		notes.Generic.addEvent(notes.Generic.resizer, "mousedown", function(e){			notes.Generic.cancelEvent(e);			notes.Generic.addEvent(document, "mousemove", resize);		});				notes.Generic.addEvent(notes.Generic.resizer, "mouseup", function(e){			notes.Generic.cancelEvent(e);			notes.Generic.remEvent(document, "mousemove", resize);		});				notes.Generic.addEvent(notes.Generic.textArea, "keydown", function(e){			notes.Generic.cancelEvent(e);			if(e.keyCode === 9){				notes.Generic.preventDefault(e);				var startCarret = this.selectionStart;				var endCarret = this.selectionEnd;				var value = this.value;				this.value = value.substring(0, startCarret) + "    " + value.substring(endCarret);				this.selectionStart = this.selectionEnd = startCarret + 4;			}		});				notes.Generic.addEvent(document, "keydown", function(e){			if(e.keyCode == 190 || e.keyCode == 46)			{				notes.Generic.cancelEvent(e);				notes.Generic.preventDefault(e);				deleteNote();			}			else if(e.keyCode == 65 && e.ctrlKey)			{				notes.Generic.cancelEvent(e);				notes.Generic.preventDefault(e);				selectAll();			}			else if(e.keyCode == 67 && e.ctrlKey)			{				notes.Generic.cancelEvent(e);				notes.Generic.preventDefault(e);				copy();			}			else if(e.keyCode == 88 && e.ctrlKey)			{				notes.Generic.cancelEvent(e);				notes.Generic.preventDefault(e);				cut();			}			else if(e.keyCode == 86 && e.ctrlKey)			{				notes.Generic.cancelEvent(e);				notes.Generic.preventDefault(e);				paste();			}			//else				//alert(e.keyCode);		});				notes.Generic.subAddButton = document.getElementById("notesSubAdd");				notes.Generic.addButton = document.getElementById("notesAdd");		notes.Generic.addEvent(notes.Generic.addButton, "click", function(e){			notes.Generic.cancelEvent(e);			if(e.clientX >= 60)				notes.Generic.subAddButton.style.display = "block";			else				addNew(ob.addNote);		});		notes.Generic.addEvent(document, "click", function(e){			if(notes.Generic.subAddButton.style.display == "block")				notes.Generic.subAddButton.style.display = "none";			if(notes.Generic.contextMenu.style.display == "block")				notes.Generic.contextMenu.style.display = "none";			if(notes.Generic.prompt.style.display == "block")				notes.Generic.prompt.style.display = "none";		});				notes.Generic.addEvent(document, "contextmenu", function(e){			if(notes.Generic.subAddButton.style.display == "block")				notes.Generic.subAddButton.style.display = "none";			if(notes.Generic.contextMenu.style.display == "block")				notes.Generic.contextMenu.style.display = "none";			if(notes.Generic.prompt.style.display == "block")				notes.Generic.prompt.style.display = "none";		});				notes.Generic.importButton = document.getElementById("notesImport");		notes.Generic.addEvent(notes.Generic.importButton, "click", function(e){			notes.Generic.cancelEvent(e);			notes.Generic.prompt.style.display = "block";		});				notes.Generic.exportButton = document.getElementById("notesExport");		notes.Generic.addEvent(notes.Generic.exportButton, "click", function(e){			var content = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(notes.Generic.notesData));			notes.Generic.exportButton.href = content;			//var d1=new Date();			//notes.Generic.exportButton.download = "notes_exported_" + d1.toString('yyyy-MM-dd-HH-mm-ss') + ".txt";		});				notes.Generic.subAddNote = document.getElementById("notesSubAddNote");		notes.Generic.addEvent(notes.Generic.subAddNote, "click", function(e){			addNew(ob.addNote);		});				notes.Generic.subAddSeparator = document.getElementById("notesSubAddSeparator");		notes.Generic.addEvent(notes.Generic.subAddSeparator, "click", function(e){			addNew(ob.addSeparator);		});				notes.Generic.subAddFolder = document.getElementById("notesSubAddFolder");		notes.Generic.addEvent(notes.Generic.subAddFolder, "click", function(e){			addNew(ob.addFolder);		});				notes.Generic.sendButton = document.getElementById("notesSend");		notes.Generic.sendButton.disabled = true;		notes.Generic.addEvent(notes.Generic.sendButton, "click", sendNote);				notes.Generic.printButton = document.getElementById("notesPrint");		notes.Generic.printButton.disabled = true;		notes.Generic.addEvent(notes.Generic.printButton, "click", printNote);				notes.Generic.deleteButton = document.getElementById("notesDelete");		notes.Generic.deleteButton.disabled = true;		notes.Generic.addEvent(notes.Generic.deleteButton, "click", deleteNote);				var tree = document.getElementById("notesTree");		this.tree = document.createElement('ul');		tree.appendChild(this.tree);		notes.Generic.notesData = notes.Generic.getData("notesData");		if(!notes.Generic.notesData)			notes.Generic.notesData = [				{					"created": 0,					"id": 0,					"order": 0,					"name": "Trash",					"type": "trash",					"children": []				}				];		notes.Generic.settingData = notes.Generic.getData("notesSettings");		if(!notes.Generic.settingData)			notes.Generic.settingData = {				"width": "40%",				"maxId": 1,				"orderBy": "created",				"orderType": "asc",				"selection": [],				"font": "Arial",				"size": "12"			};		document.body.style.fontFamily = notes.Generic.settingData.font;		notes.Generic.textArea.style.fontFamily = notes.Generic.settingData.font;		document.body.style.fontSize = notes.Generic.settingData.size + "px";		notes.Generic.textArea.style.fontSize = notes.Generic.settingData.size + "px";		notes.Generic.resizer.style.left = notes.Generic.settingData.width;		notes.Generic.contentHolder.style.left = notes.Generic.settingData.width;		notes.Generic.treeHolder.style.width = notes.Generic.settingData.width;				notes.Generic.fontFamily = document.getElementById("notesFont");		notes.Generic.fontFamily.value = notes.Generic.settingData.font;		notes.Generic.addEvent(notes.Generic.fontFamily, "input", function(e){			notes.Generic.settingData.font = notes.Generic.fontFamily.value;			document.body.style.fontFamily = notes.Generic.settingData.font;			notes.Generic.textArea.style.fontFamily = notes.Generic.settingData.font;			notes.Generic.fontFamily.value = notes.Generic.settingData.font;			notes.Generic.saveData("notesSettings", notes.Generic.settingData);		});				notes.Generic.fontSize = document.getElementById("notesSize");		notes.Generic.fontSize.value = notes.Generic.settingData.size;		notes.Generic.addEvent(notes.Generic.fontSize, "input", function(e){			notes.Generic.settingData.size = parseInt(notes.Generic.fontSize.value);			document.body.style.fontSize = notes.Generic.settingData.size;			notes.Generic.textArea.style.fontSize = notes.Generic.settingData.size;			notes.Generic.fontSize.value = notes.Generic.settingData.size;			notes.Generic.saveData("notesSettings", notes.Generic.settingData);		});				notes.Generic.order = {};		notes.Generic.order.created = document.getElementById("sortDate");		notes.Generic.addEvent(notes.Generic.order.created, "click", function(e){			notes.Generic.settingData.orderBy = "created";			if(notes.Generic.hasClass(notes.Generic.order.created.children[0], "asc"))				notes.Generic.settingData.orderType = "desc";			else				notes.Generic.settingData.orderType = "asc";			notes.Generic.saveData("notesSettings", notes.Generic.settingData);			location.reload();		});		notes.Generic.order.name = document.getElementById("sortName");		notes.Generic.addEvent(notes.Generic.order.name, "click", function(e){			notes.Generic.settingData.orderBy = "name";			if(notes.Generic.hasClass(notes.Generic.order.name.children[0], "asc"))				notes.Generic.settingData.orderType = "desc";			else				notes.Generic.settingData.orderType = "asc";			notes.Generic.saveData("notesSettings", notes.Generic.settingData);			location.reload();		});		notes.Generic.order.order = document.getElementById("sortOrder");		notes.Generic.addEvent(notes.Generic.order.order, "click", function(e){			notes.Generic.settingData.orderBy = "order";			if(notes.Generic.hasClass(notes.Generic.order.order.children[0], "asc"))				notes.Generic.settingData.orderType = "desc";			else				notes.Generic.settingData.orderType = "asc";			notes.Generic.saveData("notesSettings", notes.Generic.settingData);			location.reload();		});				notes.Generic.addClass(notes.Generic.order[notes.Generic.settingData.orderBy].children[0], notes.Generic.settingData.orderType);				process(notes.Generic.notesData, this.tree);		notes.Generic.trash.getElem().parentNode.parentNode.appendChild(notes.Generic.trash.getElem().parentNode);		notes.Generic.notesData.splice(this.trashId, 1);		notes.Generic.notesData.push(notes.Generic.trash.getData());	};		this.addSeparator = function(parent, d){		if(!d)			d = {				"id": notes.Generic.settingData.maxId,				"order": notes.Generic.settingData.maxId++,				"created": new Date().getTime() / 1000,				"type": "separator"			};		notes.Generic.dataTree[d.id] = new notes.Separator(d, parent);		return d;	};		this.addNote = function(parent, d){		if(!d)			d = {				"id": notes.Generic.settingData.maxId,				"order": notes.Generic.settingData.maxId++,				"created": new Date().getTime() / 1000,				"name": "",				"type": "note"			};		notes.Generic.dataTree[d.id] = new notes.Note(d, parent);		return d;	};		this.addFolder = function(parent, d){		if(!d)			d = {				"id": notes.Generic.settingData.maxId,				"order": notes.Generic.settingData.maxId++,				"created": new Date().getTime() / 1000,				"name": "",				"type": "folder"			};		notes.Generic.dataTree[d.id] = new notes.Folder(d, parent);		return d;	};		var resize = function(e){		notes.Generic.cancelEvent(e);		notes.Generic.resizer.style.left = e.clientX + "px";		notes.Generic.contentHolder.style.left = e.clientX + "px";		notes.Generic.treeHolder.style.width = e.clientX + "px";		notes.Generic.settingData.width = e.clientX + "px";		notes.Generic.saveData("notesSettings", notes.Generic.settingData);		if (window.getSelection) {  // all browsers, except IE before version 9            var selection = window.getSelection ();                                                    selection.removeAllRanges ();        }        else {            if (document.selection.createRange) {        // Internet Explorer                var range = document.selection.createRange ();                document.selection.empty ();            }        }	};		var deleteNote = function(e){		notes.Generic.cancelEvent(e);		for(var i = notes.Generic.curItem.length-1; i >= 0; i--)		{			var item = notes.Generic.curItem[i];			if(item.getType() != "trash")			{				if(notes.Generic.trashCan.indexOf(item) > -1)				{					var d = item.getData();					var elem = item.getElem();					if(item.getType() == "folder")						elem.parentNode.parentNode.removeChild(elem.parentNode)					else if(elem.parentNode)						elem.parentNode.removeChild(elem);					item.unselect();					notes.Generic.sendButton.disabled = true;					notes.Generic.printButton.disabled = true;					notes.Generic.deleteButton.disabled = true;					notes.Generic.deleteItem(notes.Generic.notesData, d);					var trash = notes.Generic.trash.getData();					if(!trash.children || trash.children.length == 0)						notes.Generic.trash.empty();					notes.Generic.saveData("notesData", notes.Generic.notesData);					delete notes.Generic.dataTree[item.getData().id];				}				else				{					var elem;					if(item.getType() == "folder")						elem = item.getElem().parentNode;					else					{						elem = item.getElem();						if(elem.parentNode.children.length == 1)						{							notes.Generic.removeClass(elem.parentNode.parentNode, "notesOpened");							notes.Generic.removeClass(elem.parentNode.parentNode, "notesClosed");						}					}					if(elem)					{						var trash = notes.Generic.trash.getElem();						trash.appendChild(elem);						notes.Generic.trash.open();						trash = notes.Generic.trash.getData();						if(!trash.children)							trash.children = [];						var d = item.getData();						notes.Generic.deleteItem(notes.Generic.notesData, d);						trash.children[trash.children.length] = d;						notes.Generic.trashCan.push(item);						notes.Generic.saveData("notesData", notes.Generic.notesData);					}				}			}		}	};		var emptyTrash = function(){		for(var i = notes.Generic.trashCan.length-1; i >= 0; i--)		{			var item = notes.Generic.trashCan[i];			var d = item.getData();			var elem = item.getElem();			elem.parentNode.removeChild(elem);			item.unselect();			notes.Generic.sendButton.disabled = true;			notes.Generic.printButton.disabled = true;			notes.Generic.deleteButton.disabled = true;			notes.Generic.deleteItem(notes.Generic.notesData, d);			var trash = notes.Generic.trash.getData();			delete notes.Generic.dataTree[item.getData().id];		}		notes.Generic.trashCan = [];		notes.Generic.trash.empty();		notes.Generic.saveData("notesData", notes.Generic.notesData);	};		var sendNote = function(e){		notes.Generic.cancelEvent(e);		if(notes.Generic.curItem.length > 0)		{			var item = notes.Generic.curItem[notes.Generic.curItem.length-1];			if(item.getType() != "trash" && item.getType() != "separator")				window.location.href = "mailto:?body=" + encodeURIComponent(notes.Generic.textArea.value);		}	};		var printNote = function(e){		notes.Generic.cancelEvent(e);		if(notes.Generic.curItem.length > 0)		{			var item = notes.Generic.curItem[notes.Generic.curItem.length-1];			if(item.getType() != "trash" && item.getType() != "separator")				window.print();		}	};		var addNew = function(func, data){		if(notes.Generic.curItem.length > 0)		{			var item = notes.Generic.curItem[notes.Generic.curItem.length-1];			if(item.getType() == "trash" || item.getElem().parentNode == ob.tree)			{				var d = func(ob.tree, data);				var trash = notes.Generic.trash.getElem().parentNode;				trash.parentNode.appendChild(trash);				notes.Generic.notesData.splice(notes.Generic.notesData.length-1, 0, d);			}			else if(item.getType() == "folder")			{				var d = func(item.getElem(), data);				var parent = item.getData();				if(!parent.children)					parent.children = [];				parent.children[parent.children.length] = d;				item.open();			}			else			{				if(item.getElem().parentNode != ob.tree)				{					func(item.getElem().parentNode, data);					var id = item.getElem().parentNode.parentNode.id.toString().split("_");					var data = notes.Generic.dataTree[id[1]].getData();					if(!data.children)						data.children = [];					var d = item.getData();					data.children[data.children.length] = d;					notes.Generic.saveData("notesData", notes.Generic.notesData);				}				else				{					var d = func(ob.tree, data);					notes.Generic.notesData.splice(notes.Generic.notesData.length-1, 0, d);					notes.Generic.saveData("notesData", notes.Generic.notesData);					var trash = notes.Generic.trash.getElem().parentNode;					trash.parentNode.appendChild(trash);				}			}			notes.Generic.saveData("notesData", notes.Generic.notesData);			notes.Generic.saveData("notesSettings", notes.Generic.settingData);		}		else		{			var d = func(ob.tree, data);			notes.Generic.notesData.splice(notes.Generic.notesData.length-1, 0, d);			notes.Generic.saveData("notesData", notes.Generic.notesData);			var trash = notes.Generic.trash.getElem().parentNode;			trash.parentNode.appendChild(trash);		}	};		var selectAll = function(){		for(var i in notes.Generic.dataTree)			if(notes.Generic.dataTree[i])				notes.Generic.dataTree[i].select();	};		var createContext = function(){		var ul = document.createElement("ul");		ul.style.display = "none";		ul.style.position = "absolute";		ul.id = "notesContext";		ul.appendChild(createSubContext("Send by Mail", "notesContextSend", "notesSendIcon", sendNote));		ul.appendChild(createSubContext("Print Note", "notesContextPrint", "notesPrintIcon", printNote));		ul.appendChild(createSeparatorContext());		ul.appendChild(createSubContext("Cut (Ctrl+X)", "notesContextCut", null, cut));		ul.appendChild(createSubContext("Copy (Ctrl+C)", "notesContextCopy", null, copy));		ul.appendChild(createSubContext("Paste (Ctrl+V)", "notesContextPaste", null, paste));		ul.appendChild(createSubContext("Delete (Del)", "notesContextDelete", "notesTrashIcon", deleteNote));		ul.appendChild(createSeparatorContext());		ul.appendChild(createSubContext("Empty trash", "notesContextEmpty", "notesTrashIcon", function(e){			emptyTrash();		}));		ul.appendChild(createSeparatorContext());		ul.appendChild(createSubContext("Select All (Ctrl+A)", "notesContextSelectAll", null, function(e){			selectAll();		}));		ul.appendChild(createSeparatorContext());		ul.appendChild(createSubContext("New Note", "notesContextNote", "notesAddIcon", function(e){			addNew(ob.addNote);		}));		ul.appendChild(createSubContext("New Folder", "notesContextNote", "notesAddIcon", function(e){			addNew(ob.addFolder);		}));		ul.appendChild(createSubContext("New Separator", "notesContextSeparator", null, function(e){			addNew(ob.addSeparator);		}));		document.body.appendChild(ul);		notes.Generic.contextMenu = ul;	};		var createSubContext = function(text, id, icon, func){		var li = document.createElement("li");		li.id = id;		var i = document.createElement("i");		notes.Generic.addClass(i, "notesIcon");		if(icon)			notes.Generic.addClass(i, icon);		li.appendChild(i);		var t = document.createTextNode(text);		li.appendChild(t);		notes.Generic.addEvent(li, "mousedown", func);		return li;	};		var createPrompt = function(){		var ul = document.createElement("ul");		ul.style.display = "none";		ul.style.position = "absolute";		ul.style.left = "100px";		ul.style.top = "100px";		ul.id = "notesDialog";		ul.style.zIndex = 5;		document.body.appendChild(ul);				var li = document.createElement("li");		var h = document.createElement("h3");		var t = document.createTextNode("Enter your exported notes");		h.appendChild(t);		li.appendChild(h);		ul.appendChild(li);				var li = document.createElement("li");		var t = document.createTextNode("If you are importing Opera notes, copy the part between 'JSON = [' and '];'");		li.appendChild(t);		ul.appendChild(li);				var li = document.createElement("li");		var t = document.createTextNode("From the HTML file that Opera generated after upgrading to 15+ version");		li.appendChild(t);		ul.appendChild(li);				var li = document.createElement("li");		var ta = document.createElement("textarea");		li.appendChild(ta);		ul.appendChild(li);				var li = document.createElement("li");		var b = document.createElement("button");		var t = document.createTextNode("Import");		b.appendChild(t);		li.appendChild(b);		ul.appendChild(li);		notes.Generic.prompt = ul				notes.Generic.addEvent(ta, "keydown", function(e){			notes.Generic.cancelEvent(e);		});				notes.Generic.addEvent(b, "click", function(e){			notes.Generic.prompt.style.display = "none";			var val = ta.value;			ta.value = "";			if(val && val.trim() != "")			{				//legacy importer				val = val.trim();				if(val.charAt(0) == "{")					val = "[" + val;				if(val.charAt(val.length-1) == "}")					val = val + "]";									var obj = JSON.parse(val);				obj = makeCompatible(obj);				var l = obj.length;				for(var i = 0; i < l; i++)				{					if(obj[i].type != "trash")						notes.Generic.notesData.splice(notes.Generic.notesData.length-1, 0, obj[i]);					else if(obj[i].children)						if(!notes.Generic.trash.getData().children instanceof Array)							notes.Generic.trash.getData().children = [];						notes.Generic.trash.getData().children.concat(obj[i].children);				}				notes.Generic.saveData("notesData", notes.Generic.notesData);				notes.Generic.saveData("notesSettings", notes.Generic.settingData);				location.reload();			}		});				notes.Generic.addEvent(notes.Generic.prompt, "click", function(e){			notes.Generic.cancelEvent(e);		});	};		var createSeparatorContext = function(){		var li = document.createElement("li");		notes.Generic.addClass(li, "notesSeparator");		return li;	};		var search = function(){		if(ob.retest)			clearTimeout(ob.retest);		ob.retest = null;		var el;		for(var i in notes.Generic.dataTree)		{			el = notes.Generic.dataTree[i];			if(el.getType() != "separator" && el.getType() != "trash")			{				if(el.getData().name.toLowerCase().indexOf(notes.Generic.search.value.toLowerCase()) !== -1)					el.show();				else					el.hide();			}		}	};		var copy = function(){		var l = notes.Generic.curItem.length;		for(var i = 0; i < l; i++)		{			notes.Generic.buffer[i] = notes.Generic.curItem[i];		}	};		var cut = function(){		copy();		for(var i = notes.Generic.buffer.length-1; i >= 0; i--)		{			var item = notes.Generic.buffer[i];			if(item.getType() != "trash")			{				var d = item.getData();				var elem = item.getElem();				elem.parentNode.removeChild(elem);				item.unselect();				notes.Generic.sendButton.disabled = true;				notes.Generic.printButton.disabled = true;				notes.Generic.deleteButton.disabled = true;				notes.Generic.deleteItem(notes.Generic.notesData, d);				notes.Generic.saveData("notesData", notes.Generic.notesData);				delete notes.Generic.dataTree[item.getData().id];			}		}	};		var paste = function(){		var l = notes.Generic.buffer.length;		for(var i = 0; i < l; i++)		{			var note = notes.Generic.buffer[i];			if(note.getType() == "separator")				addNew(ob.addSeparator, note.getData());			else if(note.getType() == "note")				addNew(ob.addNote, note.getData());			else if(note.getType() == "folder")				addNew(ob.addFolder, note.getData());		}	};		var process = function(tree, parent){		tree.sort(notes.Generic.sort(notes.Generic.settingData.orderBy, notes.Generic.settingData.orderType));		var l = tree.length;		var branch;		var inst;		for(var i = 0; i < l; i++)		{			branch = tree[i];			if(branch.type == "note")				inst = new notes.Note(branch, parent);			else if(branch.type == "folder")				inst = new notes.Folder(branch, parent);			else if(branch.type == "separator")				inst = new notes.Separator(branch, parent);			else if(branch.type == "trash")			{				inst = new notes.Trash(branch, parent);				ob.trashId = i;			}				notes.Generic.dataTree[branch.id] = inst;			var index = notes.Generic.settingData.selection.indexOf(branch.id);			if(index > -1)			{				notes.Generic.settingData.selection.splice(index, 1);				inst.select();			}						if(notes.Generic.trash && tree == notes.Generic.trash.getData().children)				notes.Generic.trashCan.push(inst);							if(branch.children)				process(branch.children, inst.getElem());		}	};		var makeCompatible = function(tree){		var l = tree.length;		var branch;		for(var i = 0; i < l; i++)		{			branch = tree[i];			branch.id = notes.Generic.settingData.maxId;			branch.order = notes.Generic.settingData.maxId++;			if(branch.type == "seperator")				branch.type = "separator";			if(branch.trash_folder)				branch.type = "trash";			if(branch.children)				branch.children = makeCompatible(branch.children);		}		return tree;	};		this.construct();};notes.Generic = {	curItem: [], 	trash: null, 	trashCan: [],	textArea: null,	resizer: null,	search: null,	buffer: [],	addButon: null,	subAddNote: null,	subAddFolder: null,	subAddSeparator: null,	sendButon: null,	printButon: null,	deleteButon: null,	importButon: null,	exportButon: null,	notesData: null,	contextMenu: null,	dataTree: [],	sort: function(key, type){		if(key == "name")			return function(a, b){				/*if(!a[key] || !b[key])					return 0;*/				a = String(a[key]).toLowerCase();				b = String(b[key]).toLowerCase();				if(type == "asc")					return (a.localeCompare(b));				else					return (b.localeCompare(a));			};		else			return function(a, b){				if(type == "asc")					return (a[key] > b[key]);				else					return (a[key] < b[key]);			};	},	truncateText: function(text){		var arr = text.split("\n");		return arr[0];	},	addEvent: function(element, type, listener){		if(element.addEventListener)			element.addEventListener(type, listener, false);		else			element.attachEvent('on' +  type, listener);	},	remEvent: function(element, type, listener){		if(element.removeEventListener)			element.removeEventListener(type, listener, false);		else			element.detachEvent('on' +  type, listener);	},	addClass: function(ele,cls){		if (!this.hasClass(ele,cls)) ele.className += " "+cls;	},	removeClass: function(ele,cls){    	if (this.hasClass(ele,cls)) {	    	var reg = new RegExp('(\\s|^)'+cls+'(\\s|$)');			ele.className=ele.className.replace(reg,' ');		}	},	hasClass: function(ele,cls){		return ele.className.match(new RegExp('(\\s|^)'+cls+'(\\s|$)'));	},	cancelEvent: function(e){		var evt = e ? e:window.event;		if (evt.stopPropagation)    evt.stopPropagation();		if (evt.cancelBubble!=null) evt.cancelBubble = true;	},	saveData: function(key, value){		localStorage.setItem(key, JSON.stringify(value));	},	getData: function(key){		return JSON.parse(localStorage.getItem(key));	},	preventDefault: function(event){		if(window.event)			window.event.returnValue = false;		else if(event.preventDefault)			event.preventDefault();		else			event.returnValue = false;	},	getEventTarget: function(event){		if(!event)			return window.event.srcElement;		else if(event.target)			return event.target; 		else			return event.srcElement;	},	deleteItem: function(tree, item){		var l = tree.length;		var branch;		for(var i = 0; i < l; i++)		{			branch = tree[i];			if(branch == item)			{				tree.splice(i, 1);				return true;			}			if(branch.children)				if(this.deleteItem(branch.children, item))					return true;		}	}};var nmr = new notes.Manager();